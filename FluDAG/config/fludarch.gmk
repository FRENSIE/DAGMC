# $Id: architecture.gmk,v 1.2 2008/12/15 10:10:04 salap Exp $
# ------------------------------------------------------------------------
#       fludarch.gmk
#       After GEANT 4 - Architecture configuration script for GNU Make
#
#       First implementation: 16 December 2012
#
# Description
# -----------
# Remove cruft, make Linux-specific, change G4 to FLUD.
#
# from original description:
# to override variables defined in this script, use "gmake -e", this will
# cause environment variables to take precedence. In this case watch for
# inadvertant overrides!
#
# List of the supported architectures/compilers and related flavors for
# the environment variable FLUDSYSTEM:
#
#          Linux-g++   Linux (Red Hat 7.3), gcc-2.95.2 or gcc-3.2 (default)
#
# -------------------------------------------------------------------------

MAKEFLAGS= --no-print-directory

# If not specified, the default path for FLUD installation is
# set to $HOME/flugg ...
#
ifndef FLUDINSTALL
  FLUDINSTALL := $(HOME)/fludag
endif

# If not specified, the default path for FLUD source FLUDBASE is
# set to $FLUDINSTALL/source ...
#
# Set this to a special "compile" subdirectory for now
ifndef FLUDBASE
  FLUDBASE := $(FLUDINSTALL)/source
endif

# If not specified, the default path for the user's workdir is the same
# as FLUDINSTALL ...
#
ifndef FLUDWORKDIR
  FLUDWORKDIR := $(FLUDINSTALL)
endif

# jcz set FLUDSYSTEM to Linux-g++ to simplify the makefile and reflect reality
FLUDSYSTEM = Linux-g++
# If not specified, the default path for temporary files FLUDTMP is
# set to $FLUDWORKDIR/tmp ...
#
ifndef FLUDTMP
  FLUDTMP := $(FLUDWORKDIR)/tmp
endif
FLUDDUMMY_VARIABLE:=$(shell [ ! -d $(FLUDTMP) ] && mkdir -p $(FLUDTMP) )
	
# If not specified, the default path for FLUD libraries is
# set to $FLUDINSTALL/lib...
#
ifndef FLUDLIB
  FLUDLIB := $(FLUDINSTALL)/lib
endif
FLUDDUMMY_VARIABLE:=$(shell [ ! -d $(FLUDLIB) ] && mkdir -p $(FLUDLIB) )
FLUDDUMMY_VARIABLE:=$(shell [ ! -d $(FLUDLIB) ] && mkdir -p $(FLUDLIB)

# If not specified, the default path to install FLUD include files is FLUDINCLUDE 
# set to $FLUDINSTALL/include ...
#
ifndef FLUDINCLUDE
  FLUDINCLUDE := $(FLUDINSTALL)/include
endif
FLUDDUMMY_VARIABLE:=$(shell [ ! -d $(FLUDINCLUDE) ] && mkdir -p $(FLUDINCLUDE) )

# Backwards compatibility
#
#ifneq ($(G4MAKESHLIB),)
#  G4LIB_BUILD_SHARED = 1
#endif

# Defaults for library BUILD. No default for USE, ie. take what is found.
# Default is building static libraries.
#
ifeq ($(G4LIB_BUILD_SHARED),)
  ifeq ($(G4LIB_BUILD_STATIC),)
    G4LIB_BUILD_STATIC = 1
  endif  
endif

# Specify if to build the STEP and STEinterface modules or not.
# Default is NO.
#
#ifneq ($(G4LIB_BUILD_STEP),)
#  G4LIB_BUILD_STEP = 1
#  G4USE_STEP = 1
#endif

# If not specified, the default path for G4 binaries G4BIN is
# set to $FLUDWORKDIR/bin...
#
ifndef FLUDBIN
  FLUDBIN := $(FLUDWORKDIR)/bin
endif
FLUDDUMMY_VARIABLE:=$(shell [ ! -d $(FLUDBIN) ] && mkdir -p $(FLUDBIN) )

# If FLUDDEBUG or FLUDNO_OPTIMISE are not specified,
# the default compilation is optimised ...
#
ifdef FLUDDEBUG
  CPPFLAGS += -DFLUDDEBUG
  FLUDDEBUG := 1
else
  ifndef FLUDNO_OPTIMISE
    CPPFLAGS += -DFLUDOPTIMISE
    FLUDOPTIMISE := 1
  endif
endif

# Paths for G4 data
#
#ifndef G4DATA
#  G4DATA := $(FLUDINSTALL)/data
#endif

# Don't toggle variables (positional qualifiers) between WIN32-VC and UNIX...
#
  OUT_OBJ := -o 
  FOR_OBJ := -o 
  OUT_LIB := 
  OUT_EXE := -o 
  LIB_PATH := -L
  PATH_DEL := /
  #
  # pattern for next substitution
  #
  LIB_PATT  := -l(LibName)
  FLIB_PATT := $(LIB_PATT)

# Variables for implicit rules, etc., as suggested in GNU Make manual...
#
CPPFLAGS  += -Iinclude 
#CPPFLAGS  += -I$(CLHEP_INCLUDE_DIR)
# Use 64 bits
CPPFLAGS += -m64
#
# Positional qualifiers in action...
#
  LDFLAGS   := -L$(CLHEP_LIB_DIR)
  LOADLIBS  := -l$(CLHEP_LIB)
  LOADLIBS  += -lm
# ------------------ X11 ---------------------
X11FLAGS  :=
X11LIBS   := -lXmu -lXt -lXext -lX11
# ----------------- Motif --------------------
XMFLAGS   :=
XMLIBS    := -lXm
# ---------------- Athena --------------------
XAWFLAGS   :=
XAWLIBS    := -lXaw
# ---------------- OpenGL --------------------
# The user can define his own values of OGLFLAGS and OGLLIBS.
# OGLFLAGS gives the directory containing include files.
#   E.g.: OGLFLAGS  := -I$(OGLHOME)/include
# OGLLIBS gives the libraries.
#   E.g.: OGLLIBS   := -L$(OGLHOME)/lib -lGLU -lGL
#   Or  : OGLLIBS   := -L$(OGLHOME)/lib -lMesaGLU -lMesaGL
# OGLHOME is often /usr or /usr/local.  Or it can point to a special
# installation.

# For cfront compilers the repository location is set to
# $G4TMP/$G4SYSTEM/g4.ptrepository.
#
#G4TEMPLATE_REPOSITORY := $(G4SYSTEM)/g4.ptrepository
#G4TEMPEXEC_REPOSITORY := $(G4TEMPLATE_REPOSITORY)/exec
#G4TREP := $(G4TMP)/$(G4TEMPLATE_REPOSITORY)

# Default archive call. Changed for: SUN-CC.
#
AR := ar r

# Default echo used with makedepend. Changed for SUN-CC, Linux-g++.
#
ECHO:= echo

# Default grep used with source/GNUmakfile.  Changed for SUN-CC.
#
GREP := grep

# Include architecture dependent setups...
#
include $(FLUDINSTALL)/config/sys/$Linux-g++.gmk

# Verbosity code can be left out (for better performance)
# by defining FLUD_NO_VERBOSE.
#
ifndef FLUD_NO_VERBOSE
  CPPFLAGS += -DFLUDVERBOSE
endif

# Trajectory related classes can be left out (for better performance)
# by defining G4_NO_STORE_TRAJECTORY.
#
#ifndef G4_NO_STORE_TRAJECTORY
#  CPPFLAGS += -DG4_STORE_TRAJECTORY
#endif

# Template setup - repositories, special options etc
#
#ifdef CFRONT_G4TEMPLATE_REPOSITORY
#  ifeq ($(findstring DEC,$(G4SYSTEM)),DEC)
#      ifdef G4EXEC_BUILD
#        CXXTEMPLATE_FLAGS := -ptr $(G4TREP)/exec -ptr $(G4TREP)
#      else
#        CXXTEMPLATE_FLAGS := -ptr $(G4TREP)
#      endif
#  else
#      ifdef G4EXEC_BUILD
#       CXXTEMPLATE_FLAGS := -ptr$(G4TREP)/exec -ptr$(G4TREP)
#      else
#        CXXTEMPLATE_FLAGS := -ptr$(G4TREP)
#      endif
#  endif
#  CXXFLAGS += $(CXXTEMPLATE_FLAGS)
#  CFRONT := true
#endif
#ifdef CFRONT
#  G4TEMPLATE_REPOSITORY_PARENT := $(shell echo $(G4TREP) | sed 's!/[^/][^/]*/*$$!!' )
#  G4DUMMY_VARIABLE:=$(shell [ ! -d $(G4TEMPLATE_REPOSITORY_PARENT) ] && mkdir -p $(G4TEMPLATE_REPOSITORY_PARENT) )
#  G4DUMMY_VARIABLE:=$(shell [ ! -d $(G4TREP) ] && mkdir -p $(G4TREP) )
#  G4DUMMY_VARIABLE:=$(shell [ ! -d $(G4TREP)/exec ] &&mkdir -p $(G4TREP)/exec )
#endif


# If G4SYSTEM is not specified or not valid, issue an ERROR !
#
#$(FLUDINSTALL)/config/sys/$(G4SYSTEM).gmk:
#	@echo "ERROR - G4SYSTEM is not defined in the environment"
#	@echo "        or $(G4SYSTEM) architecture is not a valid one !"
#	exit 1
